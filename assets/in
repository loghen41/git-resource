#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh
destination=$1

if [ -z "${destination}" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > ${payload} <&0

echo "Test debug statement from in file"
load_pubkey ${payload}
load_git_crypt_key ${payload}
configure_https_tunnel ${payload}
configure_git_ssl_verification ${payload}
configure_credentials ${payload}

uri=$(jq -r '.source.uri // ""' < ${payload})
branch=$(jq -r '.source.branch // ""' < ${payload})
git_config_payload=$(jq -r '.source.git_config // []' < ${payload})
ref=$(jq -r '.version.ref // "HEAD"' < ${payload})
fetch=$(jq -r '(.params.fetch // [])[]' < ${payload})

configure_git_global "${git_config_payload}"

if [ -z "${uri}" ]; then
  echo "invalid payload (missing uri):" >&2
  cat ${payload} >&2
  exit 1
fi


if [ ! -d ${destination} ]; then
	echo "creating destination directory"
	mkdir ${destination}
fi

initial_ref=`git ls-remote ${uri} ${branch}`
return_ref=`expr "${initial_ref}" : '\([a-z0-9]*\)'`
echo ${return_ref} > ${destination}/ref
uri_array=(`echo "${uri}" | sed 's/\// /g'`)
host=`expr "${uri_array[1]}" : '.*@\([a-z\.\-]*\)'`
project="${uri_array[2]}"
repo="${uri_array[3]}"

jq -n "{
  version: {ref: $(echo ${return_ref} | jq -R .)},
  metadata: [
    {name: \"commit\", value: \"$return_ref\"},
    {name: \"Bitbucket URL for commit\", value: \"https://${host}/projects/${project}/repos/${repo}/commits/${return_ref}\"}
  ]
}" >&3
